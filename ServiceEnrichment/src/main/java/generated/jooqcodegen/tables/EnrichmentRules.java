/*
 * This file is generated by jOOQ.
 */
package generated.jooqcodegen.tables;


import generated.jooqcodegen.Keys;
import generated.jooqcodegen.Public;
import generated.jooqcodegen.tables.records.EnrichmentRulesRecord;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.util.Collection;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "https://www.jooq.org",
                "jOOQ version:3.19.1"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class EnrichmentRules extends TableImpl<EnrichmentRulesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.enrichment_rules</code>
     */
    public static final EnrichmentRules ENRICHMENT_RULES = new EnrichmentRules();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<EnrichmentRulesRecord> getRecordType() {
        return EnrichmentRulesRecord.class;
    }

    /**
     * The column <code>public.enrichment_rules.id</code>.
     */
    public final TableField<EnrichmentRulesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.enrichment_rules.enrichment_id</code>.
     */
    public final TableField<EnrichmentRulesRecord, Long> ENRICHMENT_ID = createField(DSL.name("enrichment_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.enrichment_rules.rule_id</code>.
     */
    public final TableField<EnrichmentRulesRecord, Long> RULE_ID = createField(DSL.name("rule_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.enrichment_rules.field_name</code>.
     */
    public final TableField<EnrichmentRulesRecord, String> FIELD_NAME = createField(DSL.name("field_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.enrichment_rules.field_name_enrichment</code>.
     */
    public final TableField<EnrichmentRulesRecord, String> FIELD_NAME_ENRICHMENT = createField(DSL.name("field_name_enrichment"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.enrichment_rules.field_value</code>.
     */
    public final TableField<EnrichmentRulesRecord, String> FIELD_VALUE = createField(DSL.name("field_value"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.enrichment_rules.field_value_default</code>.
     */
    public final TableField<EnrichmentRulesRecord, String> FIELD_VALUE_DEFAULT = createField(DSL.name("field_value_default"), SQLDataType.CLOB.nullable(false), this, "");

    private EnrichmentRules(Name alias, Table<EnrichmentRulesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private EnrichmentRules(Name alias, Table<EnrichmentRulesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.enrichment_rules</code> table reference
     */
    public EnrichmentRules(String alias) {
        this(DSL.name(alias), ENRICHMENT_RULES);
    }

    /**
     * Create an aliased <code>public.enrichment_rules</code> table reference
     */
    public EnrichmentRules(Name alias) {
        this(alias, ENRICHMENT_RULES);
    }

    /**
     * Create a <code>public.enrichment_rules</code> table reference
     */
    public EnrichmentRules() {
        this(DSL.name("enrichment_rules"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @NotNull
    public Identity<EnrichmentRulesRecord, Integer> getIdentity() {
        return (Identity<EnrichmentRulesRecord, Integer>) super.getIdentity();
    }

    @Override
    @NotNull
    public UniqueKey<EnrichmentRulesRecord> getPrimaryKey() {
        return Keys.ENRICHMENT_RULES_PKEY;
    }

    @Override
    @NotNull
    public EnrichmentRules as(String alias) {
        return new EnrichmentRules(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public EnrichmentRules as(Name alias) {
        return new EnrichmentRules(alias, this);
    }

    @Override
    @NotNull
    public EnrichmentRules as(Table<?> alias) {
        return new EnrichmentRules(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public EnrichmentRules rename(String name) {
        return new EnrichmentRules(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public EnrichmentRules rename(Name name) {
        return new EnrichmentRules(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public EnrichmentRules rename(Table<?> name) {
        return new EnrichmentRules(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public EnrichmentRules where(Condition condition) {
        return new EnrichmentRules(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public EnrichmentRules where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public EnrichmentRules where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public EnrichmentRules where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public EnrichmentRules where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public EnrichmentRules where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public EnrichmentRules where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public EnrichmentRules where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public EnrichmentRules whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public EnrichmentRules whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
