/*
 * This file is generated by jOOQ.
 */
package generated.jooqcodegen.tables.pojos;


import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import javax.annotation.processing.Generated;
import java.beans.ConstructorProperties;
import java.io.Serializable;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "https://www.jooq.org",
                "jOOQ version:3.19.1"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class EnrichmentRules implements Serializable {

    private static final long serialVersionUID = 1L;

    private final Integer id;
    private final Long enrichmentId;
    private final Long ruleId;
    private final String fieldName;
    private final String fieldNameEnrichment;
    private final String fieldValue;
    private final String fieldValueDefault;

    public EnrichmentRules(EnrichmentRules value) {
        this.id = value.id;
        this.enrichmentId = value.enrichmentId;
        this.ruleId = value.ruleId;
        this.fieldName = value.fieldName;
        this.fieldNameEnrichment = value.fieldNameEnrichment;
        this.fieldValue = value.fieldValue;
        this.fieldValueDefault = value.fieldValueDefault;
    }

    @ConstructorProperties({"id", "enrichmentId", "ruleId", "fieldName", "fieldNameEnrichment", "fieldValue", "fieldValueDefault"})
    public EnrichmentRules(
            @Nullable Integer id,
            @NotNull Long enrichmentId,
            @NotNull Long ruleId,
            @NotNull String fieldName,
            @NotNull String fieldNameEnrichment,
            @NotNull String fieldValue,
            @NotNull String fieldValueDefault
    ) {
        this.id = id;
        this.enrichmentId = enrichmentId;
        this.ruleId = ruleId;
        this.fieldName = fieldName;
        this.fieldNameEnrichment = fieldNameEnrichment;
        this.fieldValue = fieldValue;
        this.fieldValueDefault = fieldValueDefault;
    }

    /**
     * Getter for <code>public.enrichment_rules.id</code>.
     */
    @Nullable
    public Integer getId() {
        return this.id;
    }

    /**
     * Getter for <code>public.enrichment_rules.enrichment_id</code>.
     */
    @NotNull
    public Long getEnrichmentId() {
        return this.enrichmentId;
    }

    /**
     * Getter for <code>public.enrichment_rules.rule_id</code>.
     */
    @NotNull
    public Long getRuleId() {
        return this.ruleId;
    }

    /**
     * Getter for <code>public.enrichment_rules.field_name</code>.
     */
    @NotNull
    public String getFieldName() {
        return this.fieldName;
    }

    /**
     * Getter for <code>public.enrichment_rules.field_name_enrichment</code>.
     */
    @NotNull
    public String getFieldNameEnrichment() {
        return this.fieldNameEnrichment;
    }

    /**
     * Getter for <code>public.enrichment_rules.field_value</code>.
     */
    @NotNull
    public String getFieldValue() {
        return this.fieldValue;
    }

    /**
     * Getter for <code>public.enrichment_rules.field_value_default</code>.
     */
    @NotNull
    public String getFieldValueDefault() {
        return this.fieldValueDefault;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final EnrichmentRules other = (EnrichmentRules) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        } else if (!this.id.equals(other.id))
            return false;
        if (this.enrichmentId == null) {
            if (other.enrichmentId != null)
                return false;
        } else if (!this.enrichmentId.equals(other.enrichmentId))
            return false;
        if (this.ruleId == null) {
            if (other.ruleId != null)
                return false;
        } else if (!this.ruleId.equals(other.ruleId))
            return false;
        if (this.fieldName == null) {
            if (other.fieldName != null)
                return false;
        } else if (!this.fieldName.equals(other.fieldName))
            return false;
        if (this.fieldNameEnrichment == null) {
            if (other.fieldNameEnrichment != null)
                return false;
        } else if (!this.fieldNameEnrichment.equals(other.fieldNameEnrichment))
            return false;
        if (this.fieldValue == null) {
            if (other.fieldValue != null)
                return false;
        } else if (!this.fieldValue.equals(other.fieldValue))
            return false;
        if (this.fieldValueDefault == null) {
            if (other.fieldValueDefault != null)
                return false;
        } else if (!this.fieldValueDefault.equals(other.fieldValueDefault))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.enrichmentId == null) ? 0 : this.enrichmentId.hashCode());
        result = prime * result + ((this.ruleId == null) ? 0 : this.ruleId.hashCode());
        result = prime * result + ((this.fieldName == null) ? 0 : this.fieldName.hashCode());
        result = prime * result + ((this.fieldNameEnrichment == null) ? 0 : this.fieldNameEnrichment.hashCode());
        result = prime * result + ((this.fieldValue == null) ? 0 : this.fieldValue.hashCode());
        result = prime * result + ((this.fieldValueDefault == null) ? 0 : this.fieldValueDefault.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("EnrichmentRules (");

        sb.append(id);
        sb.append(", ").append(enrichmentId);
        sb.append(", ").append(ruleId);
        sb.append(", ").append(fieldName);
        sb.append(", ").append(fieldNameEnrichment);
        sb.append(", ").append(fieldValue);
        sb.append(", ").append(fieldValueDefault);

        sb.append(")");
        return sb.toString();
    }
}
