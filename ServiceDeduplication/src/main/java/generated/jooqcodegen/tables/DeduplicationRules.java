/*
 * This file is generated by jOOQ.
 */
package generated.jooqcodegen.tables;


import generated.jooqcodegen.Keys;
import generated.jooqcodegen.Public;
import generated.jooqcodegen.tables.records.DeduplicationRulesRecord;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.util.Collection;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "https://www.jooq.org",
                "jOOQ version:3.19.1"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class DeduplicationRules extends TableImpl<DeduplicationRulesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.deduplication_rules</code>
     */
    public static final DeduplicationRules DEDUPLICATION_RULES = new DeduplicationRules();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<DeduplicationRulesRecord> getRecordType() {
        return DeduplicationRulesRecord.class;
    }

    /**
     * The column <code>public.deduplication_rules.id</code>.
     */
    public final TableField<DeduplicationRulesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.deduplication_rules.deduplication_id</code>.
     */
    public final TableField<DeduplicationRulesRecord, Long> DEDUPLICATION_ID = createField(DSL.name("deduplication_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.deduplication_rules.rule_id</code>.
     */
    public final TableField<DeduplicationRulesRecord, Long> RULE_ID = createField(DSL.name("rule_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.deduplication_rules.field_name</code>.
     */
    public final TableField<DeduplicationRulesRecord, String> FIELD_NAME = createField(DSL.name("field_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.deduplication_rules.time_to_live_sec</code>.
     */
    public final TableField<DeduplicationRulesRecord, Long> TIME_TO_LIVE_SEC = createField(DSL.name("time_to_live_sec"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.deduplication_rules.is_active</code>.
     */
    public final TableField<DeduplicationRulesRecord, Boolean> IS_ACTIVE = createField(DSL.name("is_active"), SQLDataType.BOOLEAN.nullable(false), this, "");

    private DeduplicationRules(Name alias, Table<DeduplicationRulesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private DeduplicationRules(Name alias, Table<DeduplicationRulesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.deduplication_rules</code> table reference
     */
    public DeduplicationRules(String alias) {
        this(DSL.name(alias), DEDUPLICATION_RULES);
    }

    /**
     * Create an aliased <code>public.deduplication_rules</code> table reference
     */
    public DeduplicationRules(Name alias) {
        this(alias, DEDUPLICATION_RULES);
    }

    /**
     * Create a <code>public.deduplication_rules</code> table reference
     */
    public DeduplicationRules() {
        this(DSL.name("deduplication_rules"), null);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @NotNull
    public Identity<DeduplicationRulesRecord, Integer> getIdentity() {
        return (Identity<DeduplicationRulesRecord, Integer>) super.getIdentity();
    }

    @Override
    @NotNull
    public UniqueKey<DeduplicationRulesRecord> getPrimaryKey() {
        return Keys.DEDUPLICATION_RULES_PKEY;
    }

    @Override
    @NotNull
    public DeduplicationRules as(String alias) {
        return new DeduplicationRules(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public DeduplicationRules as(Name alias) {
        return new DeduplicationRules(alias, this);
    }

    @Override
    @NotNull
    public DeduplicationRules as(Table<?> alias) {
        return new DeduplicationRules(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public DeduplicationRules rename(String name) {
        return new DeduplicationRules(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public DeduplicationRules rename(Name name) {
        return new DeduplicationRules(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public DeduplicationRules rename(Table<?> name) {
        return new DeduplicationRules(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public DeduplicationRules where(Condition condition) {
        return new DeduplicationRules(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public DeduplicationRules where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public DeduplicationRules where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public DeduplicationRules where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public DeduplicationRules where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public DeduplicationRules where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public DeduplicationRules where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public DeduplicationRules where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public DeduplicationRules whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public DeduplicationRules whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
